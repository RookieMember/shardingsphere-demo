# 配置ds0 和ds1两个数据源
spring.shardingsphere.datasource.names=ds0,ds1

#ds0 配置
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://127.0.0.1:3306/shop_ds_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456
#ds1 配置
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://127.0.0.1:3306/shop_ds_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

# 分库策略 根据id取模确定数据进哪个数据库(这里配置的是默认的分库测试,所有的分表如果没有自定义配置，默认走这个策略)
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}
spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
spring.shardingsphere.sharding.broadcast-tables=t_address

# 默认数据源，未分片的表默认执行库
spring.shardingsphere.sharding.default-data-source-name=ds0
#广播表可以不配置真实数据节点
#spring.shardingsphere.sharding.tables.t_address.actual-data-nodes=ds$->{0..1}.t_address

# t_order表策略(actual-data-nodes配置的是实际数据节点的格式)
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order
# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id=123

# t_order_item表策略
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item
# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=order_item_id
spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.worker.id=123

#编排治理的实例类型:zookeeper,还支持etcd，apollo,nacos(zookeeper和etcd同时支持配置中心和注册中心，其他只支持配置中心)
spring.shardingsphere.orchestration.shardingjdbc-demo.instance-type=zookeeper
#命名空间配置
spring.shardingsphere.orchestration.shardingjdbc-demo.namespace=shardingjdbc-namespace
#编排治理的配置类型:注册中心和配置中心
spring.shardingsphere.orchestration.shardingjdbc-demo.orchestration-type=registry_center,config_center
#本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
spring.shardingsphere.orchestration.shardingjdbc-demo.props.overwrite=true
#注册中心，配置中心的列表地址
#spring.shardingsphere.orchestration.shardingjdbc-demo.server-lists=127.0.0.1:2181
#注册中心配置127.0.0.1:2181有问题，服务关闭之后，注册中心服务列表没有下线
spring.shardingsphere.orchestration.shardingjdbc-demo.server-lists=192.168.1.104:2181

#官网文档是下面这样的，不是最新的4.1.1的文档，最新的文档可以参考官方example
#spring.shardingsphere.orchestration.name=test
#spring.shardingsphere.orchestration.overwrite=true
#spring.shardingsphere.orchestration.registry.type=zookeeper
#spring.shardingsphere.orchestration.registry.namespace=test-namespace
#spring.shardingsphere.orchestration.registry.server-lists=127.0.0.1:2181